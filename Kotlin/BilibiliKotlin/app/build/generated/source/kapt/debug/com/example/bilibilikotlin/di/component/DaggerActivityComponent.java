// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.bilibilikotlin.di.component;

import android.app.Activity;
import com.example.bilibilikotlin.di.module.ActivityModule;
import com.example.bilibilikotlin.di.module.ActivityModule_ProvideActivityFactory;
import com.example.bilibilikotlin.module.app.SplashActivity;
import com.example.bilibilikotlin.module.app.SplashActivity_MembersInjector;
import com.example.bilibilikotlin.module.app.video.VideoDetailActivity;
import com.example.bilibilikotlin.module.app.video.VideoDetailActivity_MembersInjector;
import com.example.bilibilikotlin.module.app.video.VideoPlayerActivity;
import com.example.bilibilikotlin.module.app.video.VideoPlayerActivity_MembersInjector;
import com.example.bilibilikotlin.mvp.presenter.app.SplashPresenter;
import com.example.bilibilikotlin.mvp.presenter.app.SplashPresenter_Factory;
import com.example.bilibilikotlin.mvp.presenter.app.video.VideoDetailPresenter;
import com.example.bilibilikotlin.mvp.presenter.app.video.VideoDetailPresenter_Factory;
import com.example.bilibilikotlin.mvp.presenter.app.video.VideoPlayerPresenter;
import com.example.bilibilikotlin.mvp.presenter.app.video.VideoPlayerPresenter_Factory;
import com.example.bilibilikotlin.network.helper.RetrofitHelper;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<Activity> provideActivityProvider;

  private Provider<RetrofitHelper> getRetrofitHelperProvider;

  private Provider<SplashPresenter> splashPresenterProvider;

  private MembersInjector<SplashActivity> splashActivityMembersInjector;

  private Provider<VideoDetailPresenter> videoDetailPresenterProvider;

  private MembersInjector<VideoDetailActivity> videoDetailActivityMembersInjector;

  private Provider<VideoPlayerPresenter> videoPlayerPresenterProvider;

  private MembersInjector<VideoPlayerActivity> videoPlayerActivityMembersInjector;

  private DaggerActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideActivityProvider =
        DoubleCheck.provider(ActivityModule_ProvideActivityFactory.create(builder.activityModule));

    this.getRetrofitHelperProvider =
        new com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper(
            builder.appComponent);

    this.splashPresenterProvider =
        SplashPresenter_Factory.create(
            MembersInjectors.<SplashPresenter>noOp(), getRetrofitHelperProvider);

    this.splashActivityMembersInjector =
        SplashActivity_MembersInjector.create(splashPresenterProvider);

    this.videoDetailPresenterProvider =
        VideoDetailPresenter_Factory.create(
            MembersInjectors.<VideoDetailPresenter>noOp(), getRetrofitHelperProvider);

    this.videoDetailActivityMembersInjector =
        VideoDetailActivity_MembersInjector.create(videoDetailPresenterProvider);

    this.videoPlayerPresenterProvider =
        VideoPlayerPresenter_Factory.create(
            MembersInjectors.<VideoPlayerPresenter>noOp(), getRetrofitHelperProvider);

    this.videoPlayerActivityMembersInjector =
        VideoPlayerActivity_MembersInjector.create(videoPlayerPresenterProvider);
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public void inject(SplashActivity splashActivity) {
    splashActivityMembersInjector.injectMembers(splashActivity);
  }

  @Override
  public void inject(VideoDetailActivity videoDetailActivity) {
    videoDetailActivityMembersInjector.injectMembers(videoDetailActivity);
  }

  @Override
  public void inject(VideoPlayerActivity videoPlayerActivity) {
    videoPlayerActivityMembersInjector.injectMembers(videoPlayerActivity);
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private AppComponent appComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper
      implements Provider<RetrofitHelper> {
    private final AppComponent appComponent;

    com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RetrofitHelper get() {
      return Preconditions.checkNotNull(
          appComponent.getRetrofitHelper(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
