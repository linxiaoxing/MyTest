// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.bilibilikotlin.di.component;

import android.app.Activity;
import com.example.bilibilikotlin.di.module.FragmentModule;
import com.example.bilibilikotlin.di.module.FragmentModule_ProvideActivityFactory;
import com.example.bilibilikotlin.module.app.video.CommentFragment;
import com.example.bilibilikotlin.module.app.video.CommentFragment_MembersInjector;
import com.example.bilibilikotlin.module.app.video.SummaryFragment;
import com.example.bilibilikotlin.module.app.video.SummaryFragment_MembersInjector;
import com.example.bilibilikotlin.module.home.LiveFragment;
import com.example.bilibilikotlin.module.home.LiveFragment_MembersInjector;
import com.example.bilibilikotlin.module.home.RecommendFragment;
import com.example.bilibilikotlin.module.home.RecommendFragment_MembersInjector;
import com.example.bilibilikotlin.mvp.presenter.RecommendPresenter;
import com.example.bilibilikotlin.mvp.presenter.RecommendPresenter_Factory;
import com.example.bilibilikotlin.mvp.presenter.app.video.CommentPresenter;
import com.example.bilibilikotlin.mvp.presenter.app.video.CommentPresenter_Factory;
import com.example.bilibilikotlin.mvp.presenter.app.video.SummaryPresenter;
import com.example.bilibilikotlin.mvp.presenter.app.video.SummaryPresenter_Factory;
import com.example.bilibilikotlin.mvp.presenter.live.LivePresenter;
import com.example.bilibilikotlin.mvp.presenter.live.LivePresenter_Factory;
import com.example.bilibilikotlin.network.helper.RetrofitHelper;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerFragmentComponent implements FragmentComponent {
  private Provider<Activity> provideActivityProvider;

  private Provider<RetrofitHelper> getRetrofitHelperProvider;

  private Provider<LivePresenter> livePresenterProvider;

  private MembersInjector<LiveFragment> liveFragmentMembersInjector;

  private Provider<RecommendPresenter> recommendPresenterProvider;

  private MembersInjector<RecommendFragment> recommendFragmentMembersInjector;

  private Provider<SummaryPresenter> summaryPresenterProvider;

  private MembersInjector<SummaryFragment> summaryFragmentMembersInjector;

  private Provider<CommentPresenter> commentPresenterProvider;

  private MembersInjector<CommentFragment> commentFragmentMembersInjector;

  private DaggerFragmentComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideActivityProvider =
        DoubleCheck.provider(FragmentModule_ProvideActivityFactory.create(builder.fragmentModule));

    this.getRetrofitHelperProvider =
        new com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper(
            builder.appComponent);

    this.livePresenterProvider =
        LivePresenter_Factory.create(
            MembersInjectors.<LivePresenter>noOp(), getRetrofitHelperProvider);

    this.liveFragmentMembersInjector = LiveFragment_MembersInjector.create(livePresenterProvider);

    this.recommendPresenterProvider =
        RecommendPresenter_Factory.create(
            MembersInjectors.<RecommendPresenter>noOp(), getRetrofitHelperProvider);

    this.recommendFragmentMembersInjector =
        RecommendFragment_MembersInjector.create(recommendPresenterProvider);

    this.summaryPresenterProvider =
        SummaryPresenter_Factory.create(MembersInjectors.<SummaryPresenter>noOp());

    this.summaryFragmentMembersInjector =
        SummaryFragment_MembersInjector.create(summaryPresenterProvider);

    this.commentPresenterProvider =
        CommentPresenter_Factory.create(MembersInjectors.<CommentPresenter>noOp());

    this.commentFragmentMembersInjector =
        CommentFragment_MembersInjector.create(commentPresenterProvider);
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public void inject(LiveFragment liveFragment) {
    liveFragmentMembersInjector.injectMembers(liveFragment);
  }

  @Override
  public void inject(RecommendFragment recommendFragment) {
    recommendFragmentMembersInjector.injectMembers(recommendFragment);
  }

  @Override
  public void inject(SummaryFragment summaryFragment) {
    summaryFragmentMembersInjector.injectMembers(summaryFragment);
  }

  @Override
  public void inject(CommentFragment commentFragment) {
    commentFragmentMembersInjector.injectMembers(commentFragment);
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private AppComponent appComponent;

    private Builder() {}

    public FragmentComponent build() {
      if (fragmentModule == null) {
        throw new IllegalStateException(FragmentModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFragmentComponent(this);
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper
      implements Provider<RetrofitHelper> {
    private final AppComponent appComponent;

    com_example_bilibilikotlin_di_component_AppComponent_getRetrofitHelper(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RetrofitHelper get() {
      return Preconditions.checkNotNull(
          appComponent.getRetrofitHelper(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
