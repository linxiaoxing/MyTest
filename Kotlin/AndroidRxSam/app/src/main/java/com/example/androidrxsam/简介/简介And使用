RxJava2、RxAndroid、RxLifecycle基本使用（Kotlin）
https://blog.csdn.net/alpinistwang/article/details/83107659#_13

文章目录
RxJava
简介
使用
just操作符
map操作符
flatMap操作符和concatMap操作符
internal操作符
delay操作符
take操作符
timer操作符
zip操作符
zipWith操作符
merge操作符
mergeWith操作符
concat操作符
concatWith操作符
buffer操作符
filter操作符
简写
Consumer
多次切换线程
onErrorReturn
onErrorResumeNext
error操作符
error和onErrorResumeNext结合使用
empty操作符
retry操作符
repeat操作符
repeatWhen
retryWhen
RxLifecycle
简介
使用
RxJava


简介
RxJava是基于响应式编程的框架，响应式编程的思想就是一个事件发生后，监听着这个事件的监听器马上做出响应。类似于平常的开关灯。当我们打开灯的开关时，灯马上亮了；当我们关闭灯的开关时，灯马上熄了。这个过程中，灯对我们控制开关的事件做出了响应。在Android中，设置按钮监听器也用到了响应式的思想，当有点击事件发生时，OnClickListener马上执行。也就是说OnClickListener时刻观察着按钮，当按钮被点击时，OnClickListener马上做出了响应。

RxJava中的三个基本概念：观察者Observer，被观察者Observable，订阅subscribe。当观察者订阅了被观察者，被观察者有事件发生时，观察者可以做出响应。

RxAndroid是JakeWharton对RxJava做的一个扩展，主要是为了在Android中更方便的切换到主线程

RxJava的Github地址为：https://github.com/ReactiveX/RxJava

RxAndroid的Github地址为：https://github.com/ReactiveX/RxAndroid

使用
1.在app模块的build.gradle的dependencies中引入RxJava和RxAndroid：

implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
implementation 'io.reactivex.rxjava2:rxjava:2.2.7'

注：

（1）被观察者需要重写subscribe()方法，在此方法中使用emitter发出数据，Kotlin对单方法、单参数的函数提供了一个语法糖，只需要使用it就能代表此参数emitter

（2）观察者需要重写onSubscribe()、onNext()、onError()、onComplete()方法。

onSubscribe()：订阅开始时调用

onNext()：执行发射器发出的事件

onError()：当程序出错时，执行onError，订阅结束

onComplete()：当程序完成后，执行onComplete，订阅结束

（3）使用observable.subscribe(observer)建立订阅。subscribeOn(Scheduler scheduler)决定被观察者发射事件的线程，observeOn(Scheduler scheduler)决定观察者接收事件的线程。

常用的线程类型有：

Schedulers.newThread()：新线程

Schedulers.io()：IO线程

Schedulers.computation()：计算线程

AndroidSchedulers.mainThread()：主线程(RxAndroid库中的)

